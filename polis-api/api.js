/**
 * Pol.is
 * The Pol.is API for AI-powered conversations.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: foo@example.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var request = require('request');
var Promise = require('bluebird');
var defaultBasePath = 'https://polis-api-proxy.herokuapp.com/api/v3';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var CommentModel = (function () {
    function CommentModel() {
    }
    return CommentModel;
}());
exports.CommentModel = CommentModel;
var CommentRequestBody = (function () {
    function CommentRequestBody() {
    }
    return CommentRequestBody;
}());
exports.CommentRequestBody = CommentRequestBody;
var CommentRequestBody;
(function (CommentRequestBody) {
    (function (PidEnum) {
        PidEnum[PidEnum["Mypid"] = 'mypid'] = "Mypid";
    })(CommentRequestBody.PidEnum || (CommentRequestBody.PidEnum = {}));
    var PidEnum = CommentRequestBody.PidEnum;
})(CommentRequestBody = exports.CommentRequestBody || (exports.CommentRequestBody = {}));
var ConversationModel = (function () {
    function ConversationModel() {
    }
    return ConversationModel;
}());
exports.ConversationModel = ConversationModel;
var ConversationParticipantStats = (function () {
    function ConversationParticipantStats() {
    }
    return ConversationParticipantStats;
}());
exports.ConversationParticipantStats = ConversationParticipantStats;
var ConversationParticipants = (function () {
    function ConversationParticipants() {
    }
    return ConversationParticipants;
}());
exports.ConversationParticipants = ConversationParticipants;
var FamousVoterModel = (function () {
    function FamousVoterModel() {
    }
    return FamousVoterModel;
}());
exports.FamousVoterModel = FamousVoterModel;
var FamousVoterModelFacebook = (function () {
    function FamousVoterModelFacebook() {
    }
    return FamousVoterModelFacebook;
}());
exports.FamousVoterModelFacebook = FamousVoterModelFacebook;
var FamousVoterModelTwitter = (function () {
    function FamousVoterModelTwitter() {
    }
    return FamousVoterModelTwitter;
}());
exports.FamousVoterModelTwitter = FamousVoterModelTwitter;
var InlineResponse200 = (function () {
    function InlineResponse200() {
    }
    return InlineResponse200;
}());
exports.InlineResponse200 = InlineResponse200;
var InlineResponse2001 = (function () {
    function InlineResponse2001() {
    }
    return InlineResponse2001;
}());
exports.InlineResponse2001 = InlineResponse2001;
var InlineResponse2002 = (function () {
    function InlineResponse2002() {
    }
    return InlineResponse2002;
}());
exports.InlineResponse2002 = InlineResponse2002;
var InlineResponse2003 = (function () {
    function InlineResponse2003() {
    }
    return InlineResponse2003;
}());
exports.InlineResponse2003 = InlineResponse2003;
/**
* Payload delivered to the metrics endpoint.
*/
var MetricsPayload = (function () {
    function MetricsPayload() {
    }
    return MetricsPayload;
}());
exports.MetricsPayload = MetricsPayload;
/**
*
*/
var PCA2Response = (function () {
    function PCA2Response() {
    }
    return PCA2Response;
}());
exports.PCA2Response = PCA2Response;
/**
* Data vectors. (Think of them as columns.)
*/
var PTPTStatsVectors = (function () {
    function PTPTStatsVectors() {
    }
    return PTPTStatsVectors;
}());
exports.PTPTStatsVectors = PTPTStatsVectors;
/**
* A vote object
*/
var VoteRequestBody = (function () {
    function VoteRequestBody() {
    }
    return VoteRequestBody;
}());
exports.VoteRequestBody = VoteRequestBody;
var VoteRequestBody;
(function (VoteRequestBody) {
    (function (PidEnum) {
        PidEnum[PidEnum["Mypid"] = 'mypid'] = "Mypid";
    })(VoteRequestBody.PidEnum || (VoteRequestBody.PidEnum = {}));
    var PidEnum = VoteRequestBody.PidEnum;
})(VoteRequestBody = exports.VoteRequestBody || (exports.VoteRequestBody = {}));
var HttpBasicAuth = (function () {
    function HttpBasicAuth() {
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = (function () {
    function OAuth() {
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = (function () {
    function VoidAuth() {
    }
    VoidAuth.prototype.applyToRequest = function (requestOptions) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
(function (CommentsApiApiKeys) {
    CommentsApiApiKeys[CommentsApiApiKeys["api_key"] = 0] = "api_key";
})(exports.CommentsApiApiKeys || (exports.CommentsApiApiKeys = {}));
var CommentsApiApiKeys = exports.CommentsApiApiKeys;
var CommentsApi = (function () {
    function CommentsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'api_key': new ApiKeyAuth('header', 'Authorization')
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(CommentsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    CommentsApi.prototype.setApiKey = function (key, value) {
        this.authentications[CommentsApiApiKeys[key]].apiKey = value;
    };
    CommentsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     *
     */
    CommentsApi.prototype.commentsFamousGet = function () {
        var localVarPath = this.basePath + '/comments/famous';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     *
     */
    CommentsApi.prototype.nextCommentGet = function () {
        var localVarPath = this.basePath + '/nextComment';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return CommentsApi;
}());
exports.CommentsApi = CommentsApi;
(function (ConversationsApiApiKeys) {
    ConversationsApiApiKeys[ConversationsApiApiKeys["api_key"] = 0] = "api_key";
})(exports.ConversationsApiApiKeys || (exports.ConversationsApiApiKeys = {}));
var ConversationsApiApiKeys = exports.ConversationsApiApiKeys;
var ConversationsApi = (function () {
    function ConversationsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'api_key': new ApiKeyAuth('header', 'Authorization')
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ConversationsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    ConversationsApi.prototype.setApiKey = function (key, value) {
        this.authentications[ConversationsApiApiKeys[key]].apiKey = value;
    };
    ConversationsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     *
     * @param conversationId
     */
    ConversationsApi.prototype.conversationsConversationIdConversationStatsGet = function (conversationId) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}/conversationStats'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling conversationsConversationIdConversationStatsGet.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     *
     * @param conversationId
     * @param lastVoteTimestamp Milliseconds since Unix epoch.
     */
    ConversationsApi.prototype.conversationsConversationIdMathPca2Get = function (conversationId, lastVoteTimestamp) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}/math/pca2'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling conversationsConversationIdMathPca2Get.');
        }
        if (lastVoteTimestamp !== undefined) {
            queryParameters['lastVoteTimestamp'] = lastVoteTimestamp;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Get all the data for conversation participants
     * @param conversationId
     */
    ConversationsApi.prototype.conversationsConversationIdParticipantsGet = function (conversationId) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}/participants'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling conversationsConversationIdParticipantsGet.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get participation data for one conversation
     *
     * @param conversationId
     */
    ConversationsApi.prototype.conversationsConversationIdParticipationGet = function (conversationId) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}/participation'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling conversationsConversationIdParticipationGet.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     *
     * @param conversationId
     * @param comment Comment object that needs to be added.
     */
    ConversationsApi.prototype.createComment = function (conversationId, comment) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}/comments'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling createComment.');
        }
        // verify required parameter 'comment' is not null or undefined
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling createComment.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: comment
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * Create a new conversation
     * @param topic
     * @param description
     * @param shortUrl will return an easily typeable shortlink
     * @param strictModeration
     */
    ConversationsApi.prototype.createConversation = function (topic, description, shortUrl, strictModeration) {
        var localVarPath = this.basePath + '/conversations';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        if (topic !== undefined) {
            formParams['topic'] = topic;
        }
        if (description !== undefined) {
            formParams['description'] = description;
        }
        if (shortUrl !== undefined) {
            formParams['short_url'] = shortUrl;
        }
        if (strictModeration !== undefined) {
            formParams['strict_moderation'] = strictModeration;
        }
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get listing of all conversations
     *
     * @param userId Numeric ID of conversation owner/participant.
     * @param limit Unlimited result set if not specified.
     */
    ConversationsApi.prototype.getAllConversations = function (userId, limit) {
        var localVarPath = this.basePath + '/conversations';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        if (userId !== undefined) {
            queryParameters['user_id'] = userId;
        }
        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     *
     * @param conversationId
     * @param includeSocial
     * @param gid
     * @param moderation
     */
    ConversationsApi.prototype.getComment = function (conversationId, includeSocial, gid, moderation) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}/comments'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getComment.');
        }
        if (includeSocial !== undefined) {
            queryParameters['include_social'] = includeSocial;
        }
        if (gid !== undefined) {
            queryParameters['gid'] = gid;
        }
        if (moderation !== undefined) {
            queryParameters['moderation'] = moderation;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get all the data for one conversation
     * If you don&#39;t supply a &#x60;user_id&#x60;, the URLs returned will not allow you to map the participants who follow the URLs back to users of your system.
     * @param conversationId
     * @param userId
     */
    ConversationsApi.prototype.getConversation = function (conversationId, userId) {
        var localVarPath = this.basePath + '/conversations/{conversation_id}'
            .replace('{' + 'conversation_id' + '}', String(conversationId));
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'conversationId' is not null or undefined
        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getConversation.');
        }
        if (userId !== undefined) {
            queryParameters['user_id'] = userId;
        }
        var useFormData = false;
        var requestOptions = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ConversationsApi;
}());
exports.ConversationsApi = ConversationsApi;
(function (MetricsApiApiKeys) {
    MetricsApiApiKeys[MetricsApiApiKeys["api_key"] = 0] = "api_key";
})(exports.MetricsApiApiKeys || (exports.MetricsApiApiKeys = {}));
var MetricsApiApiKeys = exports.MetricsApiApiKeys;
var MetricsApi = (function () {
    function MetricsApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'api_key': new ApiKeyAuth('header', 'Authorization')
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(MetricsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    MetricsApi.prototype.setApiKey = function (key, value) {
        this.authentications[MetricsApiApiKeys[key]].apiKey = value;
    };
    MetricsApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     *
     */
    MetricsApi.prototype.metricsPost = function () {
        var localVarPath = this.basePath + '/metrics';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true
        };
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return MetricsApi;
}());
exports.MetricsApi = MetricsApi;
(function (VotesApiApiKeys) {
    VotesApiApiKeys[VotesApiApiKeys["api_key"] = 0] = "api_key";
})(exports.VotesApiApiKeys || (exports.VotesApiApiKeys = {}));
var VotesApiApiKeys = exports.VotesApiApiKeys;
var VotesApi = (function () {
    function VotesApi(basePathOrUsername, password, basePath) {
        this.basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'api_key': new ApiKeyAuth('header', 'Authorization')
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(VotesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    VotesApi.prototype.setApiKey = function (key, value) {
        this.authentications[VotesApiApiKeys[key]].apiKey = value;
    };
    VotesApi.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     *
     * Submit vote data.
     * @param body Vote object that needs to be added.
     */
    VotesApi.prototype.votesPost = function (body) {
        var localVarPath = this.basePath + '/votes';
        var queryParameters = {};
        var headerParams = this.extendObj({}, this.defaultHeaders);
        var formParams = {};
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling votesPost.');
        }
        var useFormData = false;
        var requestOptions = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: body
        };
        this.authentications.api_key.applyToRequest(requestOptions);
        this.authentications.default.applyToRequest(requestOptions);
        if (Object.keys(formParams).length) {
            if (useFormData) {
                requestOptions.formData = formParams;
            }
            else {
                requestOptions.form = formParams;
            }
        }
        return new Promise(function (resolve, reject) {
            request(requestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return VotesApi;
}());
exports.VotesApi = VotesApi;
